Learn
	Response Header
	Bulk upload
	Javascript concepts
	Oops
	Git, Webpack - task runner
	fav websites

React

	React is a UI library developed at Facebook to facilitate the creation of interactive, stateful & reusable UI components.
	
	It also uses a concept called the Virtual DOM that selectively renders subtrees of nodes based upon state changes. 

	When using the render method above, our first argument is the component we want to render, and the second is the DOM node it should mount to. We can use the createClass method to create custom component classes.

	For regular html tags, the "class" attribute is "className" and the "for" attribute is "htmlFor"


	Props
		When we use our defined components, we can add attributes called props.

	State
		Every component has a state object and a props object. State is set using the setState method.

	Life Cycle Methods
		componentWillMount - Invoked once, on both client & server before rendering occurs.
		componentDidMount - Invoked once, only on the client, after rendering occurs.
		shouldComponentUpdate - Return value determines whether component should update.
		componentWillUnmount - Invoked prior to unmounting component.	

	Specs
		getInitialState - Return value is the initial value for state.
		getDefaultProps - Sets fallback props values if props aren't supplied.

	Unidirectional Data Flow
		In React, application data flows unidirectionally via the state and props objects
		This means that, in a multi component heirachy, a common parent component should manage the state and pass it down the chain via props.

	Eg
		var FilteredList = React.CreateClass(function(){
			getInitialState: function(){
				return {
					items : ['apples','orange','pine','anjoor']
				}
			},
			onChange: function(e){
				var items = this.state.items;
				items = items.filter(function(item){
					return item.toLowercase().search(e.target.value.toLowerCase=='-1')
				})
				this.setState({items:items})
			}
			render:function(){
				return (
					<div class="list">
						<input type="text" onChange={this.onChange} />
						<List items={this.state.items} />
					</div>
				)
			}
		})

		var List = React.CreateClass({
			render(){
				return (
					<ul>
						{this.props.items.map(function(item,i){
							return <li key={i}>{item}</li>
						})}
					</ul>
				)
			}
		})

	Reconciliation - Adding key to every dom node
		React provides a declarative API so that you don't have to worry about exactly what changes on every update. This makes writing applications a lot easier, but it might not be obvious how this is implemented within React. This article explains the choices we made in React's "diffing" algorithm so that component updates are predictable while being fast enough for high-performance apps.

		React implements a heuristic O(n) algorithm based on two assumptions:
			Two elements of different types will produce different trees.
			The developer can hint at which child elements may be stable across different renders with a key prop.



